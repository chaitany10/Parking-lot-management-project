# Generated by Django 2.1 on 2019-11-03 12:48

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='block',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_id', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('is_block_full', models.BooleanField(default=False)),
                ('no_of_floors', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('block_code', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='floor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floor_id', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('is_floor_full', models.BooleanField(default=False)),
                ('is_covered', models.BooleanField(default=False)),
                ('floor_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('max_height', models.IntegerField(validators=[django.core.validators.MinValueValidator(2)])),
                ('no_of_slots', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('no_of_wings', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('block_code', models.CharField(max_length=30)),
                ('block_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parkingapp.block')),
            ],
        ),
        migrations.CreateModel(
            name='parking_slot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parking_slot_id', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('wing_code', models.CharField(max_length=10)),
                ('slot_no', models.IntegerField(default=1)),
                ('is_reserved', models.BooleanField(default=False)),
                ('height', models.FloatField(default=3)),
                ('floor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parkingapp.floor')),
            ],
        ),
        migrations.CreateModel(
            name='parkingLot',
            fields=[
                ('parking_lot_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('is_slot_available', models.BooleanField(default=True)),
                ('is_reentry_allowed', models.BooleanField(default=False)),
                ('no_of_blocks', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('pincode', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('is_valet_available', models.BooleanField(default=False)),
                ('landmark', models.CharField(max_length=30)),
                ('building_no', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('street_name', models.CharField(max_length=30)),
                ('cost', models.IntegerField(default=10)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.AddField(
            model_name='block',
            name='parking_lot_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parkingapp.parkingLot'),
        ),
        migrations.AlterUniqueTogether(
            name='parking_slot',
            unique_together={('floor_id', 'parking_slot_id')},
        ),
        migrations.AlterUniqueTogether(
            name='floor',
            unique_together={('block_id', 'floor_id')},
        ),
        migrations.AlterUniqueTogether(
            name='block',
            unique_together={('parking_lot_id', 'block_id')},
        ),
    ]
